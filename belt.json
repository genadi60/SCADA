[{"id":"afbd208.aeec8e","type":"tab","label":"LentaNew","disabled":false,"info":""},{"id":"15c2c419.8f7cec","type":"function","z":"afbd208.aeec8e","name":"Enable","func":"let status = context.get('status') || 0;\nlet isFirst = flow.get('initial') || 0;\nlet input = flow.get('led_enable') || 0;\nif(isFirst === 1) {\n        if(input === 0) {\n            msg.payload = \"OFF\";\n            msg.color = \"red\";\n            context.set('status', 0);\n            return msg;\n        }\n        else {\n            msg.payload = \"ON\";\n            msg.color = \"lime\";\n            context.set('status', 1);\n            return msg;\n        }\n}\nelse {\n    if(input === status) {\n        return null;\n    }\n    else if(input === 1) {\n       msg.payload = \"ON\";\n        msg.color = \"lime\";\n        context.set('status', 1);\n        return msg; \n    }\n    else {\n        msg.payload = \"OFF\";\n        msg.color = \"red\";\n        context.set('status', 0);\n        return msg;\n    }\n}\nreturn null;\n","outputs":1,"noerr":0,"x":420,"y":440,"wires":[["51d71f04.cb2f7"]]},{"id":"2b263ebe.7d41f2","type":"function","z":"afbd208.aeec8e","name":"Main","func":"let status = context.get('status') || 0;\nlet isFirst = flow.get('initial') || 0;\nlet input = flow.get('led_main') || 0;\nif(isFirst === 1) {\n        if(input === 0) {\n            msg.payload = \"OFF\";\n            msg.color = \"red\";\n            context.set('status', 0);\n            return msg;\n        }\n        else {\n            msg.payload = \"ON\";\n            msg.color = \"lime\";\n            context.set('status', 1);\n            return msg;\n        }\n}\nelse {\n    if(input === status) {\n        return null;\n    }\n    else if(input === 1) {\n       msg.payload = \"ON\";\n        msg.color = \"lime\";\n        context.set('status', 1);\n        return msg; \n    }\n    else {\n        msg.payload = \"OFF\";\n        msg.color = \"red\";\n        context.set('status', 0);\n        return msg;\n    }\n}\nreturn null;","outputs":1,"noerr":0,"x":410,"y":560,"wires":[["6151f0bd.c3796"]]},{"id":"6f91fea3.7aa4f","type":"function","z":"afbd208.aeec8e","name":"Forward","func":"let status = context.get('status') || 0;\nlet isFirst = flow.get('initial') || 0;\nlet input = flow.get('led_forward') || 0;\nif(isFirst === 1) {\n        if(input === 0) {\n            msg.payload = \"OFF\";\n            msg.color = \"red\";\n            context.set('status', 0);\n            return msg;\n        }\n        else {\n            msg.payload = \"ON\";\n            msg.color = \"lime\";\n            context.set('status', 1);\n            return msg;\n        }\n}\nelse {\n    if(input === status) {\n        return null;\n    }\n    else if(input === 1) {\n       msg.payload = \"ON\";\n        msg.color = \"lime\";\n        context.set('status', 1);\n        return msg; \n    }\n    else {\n        msg.payload = \"OFF\";\n        msg.color = \"red\";\n        context.set('status', 0);\n        return msg;\n    }\n}\nreturn null;","outputs":1,"noerr":0,"x":420,"y":600,"wires":[["f96dd793.dcd308"]]},{"id":"da3ba53d.3e5318","type":"function","z":"afbd208.aeec8e","name":"Backward","func":"let status = context.get('status') || 0;\nlet isFirst = flow.get('initial') || 0;\nlet input = flow.get('led_backward') || 0;\nif(isFirst === 1) {\n        if(input === 0) {\n            msg.payload = \"OFF\";\n            msg.color = \"red\";\n            context.set('status', 0);\n            return msg;\n        }\n        else {\n            msg.payload = \"ON\";\n            msg.color = \"lime\";\n            context.set('status', 1);\n            return msg;\n        }\n}\nelse {\n    if(input === status) {\n        return null;\n    }\n    else if(input === 1) {\n       msg.payload = \"ON\";\n        msg.color = \"lime\";\n        context.set('status', 1);\n        return msg; \n    }\n    else {\n        msg.payload = \"OFF\";\n        msg.color = \"red\";\n        context.set('status', 0);\n        return msg;\n    }\n}\nreturn null;","outputs":1,"noerr":0,"x":420,"y":640,"wires":[["5ad1d786.80a738"]]},{"id":"d951f6da.1e9d48","type":"function","z":"afbd208.aeec8e","name":"Start","func":"let status = context.get('status') || 0;\nlet isFirst = flow.get('initial') || 0;\nlet input = flow.get('led_start') || 0;\nif(isFirst === 1) {\n        if(input === 0) {\n            msg.payload = \"OFF\";\n            msg.color = \"red\";\n            context.set('status', 0);\n            return msg;\n        }\n        else {\n            msg.payload = \"ON\";\n            msg.color = \"lime\";\n            context.set('status', 1);\n            return msg;\n        }\n}\nelse {\n    if(input === status) {\n        return null;\n    }\n    else if(input === 1) {\n       msg.payload = \"ON\";\n        msg.color = \"lime\";\n        context.set('status', 1);\n        return msg; \n    }\n    else {\n        msg.payload = \"OFF\";\n        msg.color = \"red\";\n        context.set('status', 0);\n        return msg;\n    }\n}\nreturn null;","outputs":1,"noerr":0,"x":410,"y":680,"wires":[["9bdec071.29449"]]},{"id":"cc9b85a0.171468","type":"function","z":"afbd208.aeec8e","name":"Metal","func":"let status = context.get('status') || 0;\nlet isFirst = flow.get('initial') || 0;\nlet input = flow.get('led_metal') || 0;\nif(isFirst === 1) {\n        if(input === 0) {\n            msg.payload = \"OFF\";\n            msg.color = \"red\";\n            context.set('status', 0);\n            return msg;\n        }\n        else {\n            msg.payload = \"ON\";\n            msg.color = \"lime\";\n            context.set('status', 1);\n            return msg;\n        }\n}\nelse {\n    if(input === status) {\n        return null;\n    }\n    else if(input === 1) {\n       msg.payload = \"ON\";\n        msg.color = \"lime\";\n        context.set('status', 1);\n        return msg; \n    }\n    else {\n        msg.payload = \"OFF\";\n        msg.color = \"red\";\n        context.set('status', 0);\n        return msg;\n    }\n}\nreturn null;","outputs":1,"noerr":0,"x":410,"y":720,"wires":[["74ebd76c.545498"]]},{"id":"ab030d7d.e7e6c","type":"function","z":"afbd208.aeec8e","name":"Item","func":"let status = context.get('status') || 0;\nlet isFirst = flow.get('initial') || 0;\nlet input = flow.get('led_item') || 0;\nif(isFirst === 1) {\n        if(input === 0) {\n            msg.payload = \"OFF\";\n            msg.color = \"red\";\n            context.set('status', 0);\n            return msg;\n        }\n        else {\n            msg.payload = \"ON\";\n            msg.color = \"lime\";\n            context.set('status', 1);\n            return msg;\n        }\n}\nelse {\n    if(input === status) {\n        return null;\n    }\n    else if(input === 1) {\n       msg.payload = \"ON\";\n        msg.color = \"lime\";\n        context.set('status', 1);\n        return msg; \n    }\n    else {\n        msg.payload = \"OFF\";\n        msg.color = \"red\";\n        context.set('status', 0);\n        return msg;\n    }\n}\nreturn null;","outputs":1,"noerr":0,"x":410,"y":760,"wires":[["8ff64cc1.f6626"]]},{"id":"2541f886.8d4508","type":"function","z":"afbd208.aeec8e","name":"Counter","func":"let status = context.get('status') || 0;\nlet isFirst = flow.get('initial') || 0;\nlet input = flow.get('led_counter') || 0;\nif(isFirst === 1) {\n        if(input === 0) {\n            msg.payload = \"OFF\";\n            msg.color = \"red\";\n            context.set('status', 0);\n            return msg;\n        }\n        else {\n            msg.payload = \"ON\";\n            msg.color = \"lime\";\n            context.set('status', 1);\n            return msg;\n        }\n}\nelse {\n    if(input === status) {\n        return null;\n    }\n    else if(input === 1) {\n       msg.payload = \"ON\";\n        msg.color = \"lime\";\n        context.set('status', 1);\n        return msg; \n    }\n    else {\n        msg.payload = \"OFF\";\n        msg.color = \"red\";\n        context.set('status', 0);\n        return msg;\n    }\n}\nreturn null;","outputs":1,"noerr":0,"x":420,"y":800,"wires":[["edd9a22d.9aaeb"]]},{"id":"dd430ea6.2635d","type":"function","z":"afbd208.aeec8e","name":"End Metal","func":"let status = context.get('status') || 0;\nlet isFirst = flow.get('initial') || 0;\nlet input = flow.get('led_end_metal') || 0;\nif(isFirst === 1) {\n        if(input === 0) {\n            msg.payload = \"OFF\";\n            msg.color = \"red\";\n            context.set('status', 0);\n            return msg;\n        }\n        else {\n            msg.payload = \"ON\";\n            msg.color = \"lime\";\n            context.set('status', 1);\n            return msg;\n        }\n}\nelse {\n    if(input === status) {\n        return null;\n    }\n    else if(input === 1) {\n       msg.payload = \"ON\";\n        msg.color = \"lime\";\n        context.set('status', 1);\n        return msg; \n    }\n    else {\n        msg.payload = \"OFF\";\n        msg.color = \"red\";\n        context.set('status', 0);\n        return msg;\n    }\n}\nreturn null;","outputs":1,"noerr":0,"x":420,"y":840,"wires":[["89b333d7.b024f"]]},{"id":"578c115f.c5aa8","type":"function","z":"afbd208.aeec8e","name":"Forward","func":"let workMode = flow.get('local_auto') || 0;\nlet backward = flow.get('output_backward') || 0;\nif(workMode === 0 && backward === 0) {\n    flow.set('button_forward', 1);\n}","outputs":1,"noerr":0,"x":470,"y":2000,"wires":[[]]},{"id":"2ededd48.f430a2","type":"function","z":"afbd208.aeec8e","name":"Main","func":"let workMode = flow.get('local_auto') || 0;\nif(workMode === 0) {\n   flow.set('button_main', 1); \n}\n","outputs":1,"noerr":0,"x":460,"y":1960,"wires":[[]]},{"id":"df79aea.3cdd15","type":"function","z":"afbd208.aeec8e","name":"Start","func":"flow.set('button_start', 1);","outputs":1,"noerr":0,"x":460,"y":2140,"wires":[[]]},{"id":"8ee2855c.08c448","type":"function","z":"afbd208.aeec8e","name":"Metal","func":"flow.set('button_metal', 1);","outputs":1,"noerr":0,"x":460,"y":2180,"wires":[[]]},{"id":"3adb7174.61835e","type":"function","z":"afbd208.aeec8e","name":"Item","func":"flow.set('button_item', 1);","outputs":1,"noerr":0,"x":460,"y":2220,"wires":[[]]},{"id":"f1cd728b.f7ebf","type":"function","z":"afbd208.aeec8e","name":"Counter","func":"flow.set('button_counter', 1);","outputs":1,"noerr":0,"x":470,"y":2260,"wires":[[]]},{"id":"ce6b280b.2c3158","type":"function","z":"afbd208.aeec8e","name":"End Metal","func":"flow.set('button_end_metal', 1);","outputs":1,"noerr":0,"x":470,"y":2300,"wires":[[]]},{"id":"4091eaff.2ecd44","type":"function","z":"afbd208.aeec8e","name":"Logic","func":"//let msg = {};\n//let flow = class{};\n//let global = class{};\n//let context = class{};\n\n//==========================================================\nlet stat = 0;\nlet sensorStart = flow.get('sensor_start') || 0;\nlet sensorMetal = flow.get('sensor_metal') || 0;\nlet sensorItem = flow.get('sensor_item') || 0;\nlet sensorCounter = flow.get('sensor_counter') || 0;\nlet sensorEndMetal = flow.get('sensor_end_metal') || 0;\nlet sensorEndItem = flow.get('sensor_end_item') || 0;\nlet flagEndMetal = flow.get('flag_end_metal') || 0;\nlet flagEndItem = flow.get('flag_end_item') || 0;\nlet flag = flow.get('flag') || 0;\n\n//=========================================================\n\nlet ledEnable = flow.get('led_enable') || 0;\nlet ledRun = flow.get('led_run') || 0;\nlet ledAuto = flow.get('led_auto') || 0;\nlet ledMain = flow.get('led_main') || 0;\nlet ledForward = flow.get('led_forward') || 0;\nlet ledBackward = flow.get('led_backward') || 0;\nlet ledStart = flow.get('led_start') || 0;\nlet ledMetal = flow.get('led_metal') || 0;\nlet ledItem = flow.get('led_item') || 0;\nlet ledCounter = flow.get('led_counter') || 0;\nlet ledEndMetal = flow.get('led_end_metal') || 0;\nlet ledEndItem = flow.get('led_end_item') || 0;\n\n//=========================================================\n\nlet buttonAuto = flow.get('button_auto') || 0;\nlet buttonDeployment = flow.get('button_deployment') || 0;\nlet buttonRun = flow.get('button_run') || 0;\nlet buttonReset = flow.get('button_reset') || 0;\nlet buttonEnable = flow.get('button_enable') || 0;\nlet buttonMain = flow.get('button_main') || 0;\nlet buttonForward = flow.get('button_forward') || 0;\nlet buttonBackward = flow.get('button_backward') || 0;\nlet buttonStart = flow.get('button_start') || 0;\nlet buttonMetal = flow.get('button_metal') || 0;\nlet buttonItem = flow.get('button_item') || 0;\nlet buttonCounter = flow.get('button_counter') || 0;\nlet buttonEndMetal = flow.get('button_end_metal') || 0;\nlet buttonEndItem = flow.get('button_end_item') || 0;\n\n//=========================================================\n\nlet outputEnable = flow.get('output_enable') || 0;\nlet outputMain = flow.get('output_main') || 0;\nlet outputForward = flow.get('output_forward') || 0;\nlet outputBackward = flow.get('output_backward') || 0;\n\n//=========================================================\n\nlet localAuto = flow.get('local_auto') || 0;\nlet localRun = flow.get('local_run') || 0;\nlet localReset = flow.get('local_reset') || 0;\nlet localEndItem = flow.get('local_end_item') || 0;\n\n//=========================================================\n\nlet counterStart = flow.get('counter_start') || 0;\nlet templCounterMetal = flow.get('templ_counter_metal') || 0;\nlet templCounterItem = flow.get('templ_counter_item') || [];\nlet counterCounter = flow.get('counter_counter') || [];\nlet counterEnd = flow.get('counter_end') || [];\nlet counterTotal = global.get('counter_total') || 0;\nlet counterMetal = global.get('counter_metal') || 0;\nlet counterItem = global.get('counter_item') || 0;\nlet counterLiftMetal = global.get('counter_lift_metal') || 0;\nlet counterLiftItem = global.get('counter_lift_item') || 0;\n\n//=========================================================\n\nlet outputsMatrix = flow.get('outputs_matrix') || [];\nlet inputsMatrix = flow.get('inputs_matrix') || [];\nlet inputsStatus = flow.get('inputs_status') || [];\n//=========================================================\n\nlet timer1 = flow.get('timer1') || 0;\nlet timer2 = flow.get('timer2') || 0;\nlet timer3 = flow.get('timer3') || 0;\nlet timer4 = flow.get('timer4') || 0;\nlet timer5 = flow.get('timer5') || 0;\n\nlet delay1 = flow.get('delay1') || 0;\nlet delay2 = flow.get('delay2') || 0;\nlet delay3 = flow.get('delay3') || 0;\nlet delay4 = flow.get('delay4') || 0;\nlet delay5 = flow.get('delay5') || 0;\nlet delay6 = flow.get('delay6') || 0;\nlet delay7 = flow.get('delay7') || 0;\n//let delay8 = flow.get('delay8') || 0;\n\n//=========================================================\n\nlet barrier = flow.get('barrier_flag') || false;\nlet actionFlag = flow.get('action_flag') || false;\nlet outputFlag = flow.get('output_flag') || false;\nlet barrierTime = flow.get('barrier_time') || 0;\nlet metalTime = flow.get('metal_time') || 0;\nlet actionTime = flow.get('action_time') || 0;\nconst barrierTimeDefault = 2000;\n\n//=========================================================\n\nlet msg1 = null;\nlet msg2 = null;\nlet msg3 = null;\n\n//=========================================================\n\nfunction getMatrix(status, matrix) {\n    switch (status) {\n        case 1:\n            matrix = [1, 0, 0, 0];      // set enable in auto mode\n            return matrix;\n        case 2:\n            matrix = [1, 1, 0, 0];      // start main band and stop forward and backward in auto mode\n            return matrix;\n        case 3:\n            matrix.splice(1, 1, 0);     // [1, 0, X, X] => stop main band in auto mode\n            return matrix;\n        case 4:\n            matrix.splice(1, 1, 1);     // [1, 1, X, X] => start main band in auto mode\n            return matrix;\n        case 5:\n            matrix.splice(2, 2, 1, 0);  // [X, X, 1, 0] => start forward and stop backward in auto mode\n            return matrix;\n        case 6:\n            matrix.splice(2, 2, 0, 1);  // [X, X, 0, 1] => stop forward and start backward in auto mode\n            return matrix;\n        case 7:\n            matrix.splice(2, 2, 0, 0);  // [X, X, 0, 1] => stop forward and backward in auto mode\n            return matrix;\n        case 8:\n            matrix = [1, 1, 1, 0];      // start main band and forward and stop backward in auto mode\n            return matrix;\n        case 9:\n            matrix = [1, 1, 0, 1];      // start main band and backward and stop forward in auto mode\n            return matrix;\n        default:\n            return null;\n    }\n}\n\nfunction getMetalEnd(time){\n    flow.set('metal_time', time);\n    flow.set('output_flag', true);\n}\n\nfunction getFinish(time){\n    flow.set('action_time', time);\n    flow.set('action_flag', true);\n}\n\nfunction getBarrier(time){\n    flow.set('barrier_time', time);\n    flow.set('barrier_flag', true);\n}\n\n\n\nfunction runInAutoMode() {\n    \n    let status = 0;\n    \n\n    if ((counterStart > 0 || templCounterMetal > 0 || templCounterItem > 0) && inputsStatus[1] === 0){\n        //status = 4;\n        //return status;\n    }\n    if(counterCounter.length > 0){\n        getBarrier(3000);\n    }\n    if(flow.get('timer5') === 1) {\n        flow.set('timer5', 0);\n        status = 3;\n        //return status;\n    }\n    if(flow.get('flag_end_metal') === 1){\n        getMetalEnd(2500);\n    }\n    if(flow.get('timer7') === 1) {\n        flow.set('timer', 0);\n        flow.set('flag_end_metal', 0);\n        status = 7;\n        //return status;\n    }\n   // return status;\n}\n\n\n\nfunction confirmOutputs(outputsMatrix) {\n    return {\n        'payload': {\n            'value': outputsMatrix,\n            'fc': 16,\n            'unitid': 1,\n            'address': 16384,\n            'quantity': 4\n        }\n    };\n}\n\nfunction confirmInputs(inputsMatrix) {\n    return {\n        'payload': {\n            'value': inputsMatrix,\n            'fc': 16,\n            'unitid': 1,\n            'address': 16388,\n            'quantity': 5\n        }\n    };\n}\n\nlet arrayOfCounters = [counterMetal, counterItem, templCounterMetal, templCounterItem.length, counterTotal, counterLiftMetal, counterLiftItem, counterStart, counterCounter.length, counterEnd.length];\n\nfunction initialMessage(msg, arr) {\n    msg.count_metal = arr[0];           //counterMetal;\n    msg.count_item = arr[1];            //counterItem;\n    msg.templ_count_metal = arr[2];     //templCounterMetal;\n    msg.templ_count_item = arr[3];      //templCounterItem.length;\n    msg.count_total = arr[4];           //counterTotal;\n    msg.count_lift_metal = arr[5];      //counterLiftMetal;\n    msg.count_lift_item = arr[6];       //counterLiftItem;\n    msg.count_start = arr[7];           //counterStart;\n    msg.count_counter = arr[8];         //counterCounter.length;\n    msg.count_end = arr[9];             //counterEnd.length;\n\n    return msg;\n}\n\n//==========================================================\n//  Initial state\n//==========================================================\n\nlet statusInitial = context.get('status_initial') || false;\nlet isFirst = flow.get('initial') || 0;\nif (isFirst === 1 && statusInitial === false) {\n//==========================================================\n\n    flow.set('flag_end_metal', 0);\n    flow.set('flag_end_item', 0);\n\n    flow.set('action_flag', false);\n    flow.set('barrier_flag', false);\n    flow.set('metal_output_flag', false);\n    flow.set('output_flag', false);\n\n//==========================================================\n    timer1 = 0;\n    flow.set('timer1', timer1);\n    timer2 = 0;\n    flow.set('timer2', timer2);\n    timer3 = 0;\n    flow.set('timer3', timer3);\n    timer4 = 0;\n    flow.set('timer4', timer4);\n    delay1 = 0;\n    flow.set('delay1', delay1);\n    delay2 = 0;\n    flow.set('delay2', delay2);\n    delay3 = 0;\n    flow.set('delay3', delay3);\n    delay4 = 0;\n    flow.set('delay4', delay4);\n\n//==========================================================\n    sensorStart = inputsStatus[4];\n    flow.set('sensor_start', sensorStart);\n    sensorMetal = inputsStatus[5];\n    flow.set('sensor_metal', sensorMetal);\n    sensorItem = inputsStatus[6];\n    flow.set('sensor_item', sensorItem);\n    sensorCounter = inputsStatus[7];\n    flow.set('sensor_counter', sensorCounter);\n    sensorEndMetal = inputsStatus[8];\n    flow.set('sensor_end_metal', sensorEndMetal);\n    sensorEndItem = 0;\n    flow.set('sensor_end_item', sensorEndItem);\n\n//=========================================================\n\n    outputEnable = inputsStatus[0];\n    flow.set('output_enable', outputEnable);\n    outputMain = inputsStatus[1];\n    flow.set('output_main', outputMain);\n    outputForward = inputsStatus[2];\n    flow.set('output_forward', outputForward);\n    outputBackward = inputsStatus[3];\n    flow.set('output_backward', outputBackward);\n\n//=========================================================\n\n    buttonAuto = 0;\n    flow.set('button_auto', buttonAuto);\n    buttonDeployment = 0;\n    flow.set('button_deployment', buttonDeployment);\n    buttonRun = 0;\n    flow.set('button_run', buttonRun);\n    buttonReset = 0;\n    flow.set('button_reset', buttonReset);\n\n// TODO: Only in deployment mode\n//=========================================================\n\n    buttonEnable = 0;\n    flow.set('button_enable', buttonEnable);\n    buttonMain = 0;\n    flow.set('button_main', buttonMain);\n    buttonForward = 0;\n    flow.set('button_forward', buttonForward);\n    buttonBackward = 0;\n    flow.set('button_backward', buttonBackward);\n    buttonStart = 0;\n    flow.set('button_start', buttonStart);\n    buttonMetal = 0;\n    flow.set('button_metal', buttonMetal);\n    buttonItem = 0;\n    flow.set('button_item', buttonItem);\n    buttonCounter = 0;\n    flow.set('button_counter', buttonCounter);\n    buttonEndMetal = 0;\n    flow.set('button_end_metal', buttonEndMetal);\n    buttonEndItem = 0;\n    flow.set('button_end_item', buttonEndItem);\n\n//=========================================================\n\n    ledEnable = outputEnable;\n    flow.set('led_enable', ledEnable);\n    ledRun = 0;\n    flow.set('led_run', ledRun);\n    ledAuto = 0;\n    flow.set('led_auto', ledAuto);\n    ledMain = outputMain;\n    flow.set('led_main', ledMain);\n    ledForward = outputForward;\n    flow.set('led_forward', ledForward);\n    ledBackward = outputBackward;\n    flow.set('led_backward', ledBackward);\n    ledStart = sensorStart;\n    flow.set('led_start', ledStart);\n    ledMetal = sensorMetal;\n    flow.set('led_metal', ledMetal);\n    ledItem = sensorItem;\n    flow.set('led_item', ledItem);\n    ledCounter = sensorCounter;\n    flow.set('led_counter', ledCounter);\n    ledEndMetal = sensorEndMetal;\n    flow.set('led_end_metal', ledEndMetal);\n    ledEndItem = 0;\n    flow.set('led_end_item', ledEndItem);\n\n\n//=========================================================\n\n    localAuto = 0;\n    flow.set('local_auto', localAuto);\n    localRun = 0;\n    flow.set('local_run', localRun);\n    localReset = 0;\n    flow.set('local_reset', localReset);\n    localEndItem = 0;\n    flow.set('local_end_item', localEndItem);\n\n//=========================================================\n\n    counterStart = 0;\n    flow.set('counter_start', counterStart);\n    templCounterMetal = 0;\n    flow.set('templ_counter_metal', templCounterMetal);\n    templCounterItem = [];\n    flow.set('templ_counter_item', templCounterItem);\n    counterCounter = [];\n    flow.set('counter_counter', counterCounter);\n    counterEnd = [];\n    flow.set('counter_end', counterEnd);\n\n//=========================================================\n\n    outputsMatrix = [0, 0, 0, 0];\n    flow.set('outputs_matrix', outputsMatrix);\n    inputsMatrix = [0, 0, 0, 0, 0];\n    flow.set('inputs_matrix', inputsMatrix);\n\n//=========================================================\n\n    msg1 = initialMessage(msg, arrayOfCounters);\n    msg1.topic = \"initial\";\n    msg1.alarm = 0;\n\n    msg2 = confirmOutputs(outputsMatrix);\n    msg2.topic = \"initial1\";\n\n//=========================================================\n\n    statusInitial = true;\n    context.set('status_initial', statusInitial);\n\n    // noinspection JSAnnotator\n    return [ null, msg1, msg2, null ];\n}\n\n// When lift limit is reached\n//=================================================================\n\nlet limitFlag = global.get('lift_limit_flag') || 0;\ncounterLiftMetal = global.get('counter_lift_metal');\ncounterLiftItem = global.get('counter_lift_item');\n\nlet limit = global.get('lift_limit') || 0;\nlet statusAlarm = context.get('status_alarm') || false;\nif((counterLiftMetal === limit || counterLiftItem === limit ) && statusAlarm === false) {\n    limitFlag = 1;\n    global.set('lift_limit_flag', limitFlag);\n    msg.forward = 0;\n    msg.backward = 0;\n    msg.main = 0;\n    msg.topic = \"server/main_stop\";\n    msg.alarm = 1;\n\n    msg1 = msg;\n    msg1.alarm = 1;\n    msg1.topic = \"lift/limit\";\n\n    statusAlarm = true;\n    context.set('status_alarm', statusAlarm);\n\n    // noinspection JSAnnotator\n    return [null, msg1, null, null];\n}\nelse if(counterLiftMetal < limit && counterLiftItem < limit) {\n    if(limitFlag === 1) {\n        limitFlag = 0;\n        global.set('lift_limit_flag', limitFlag);\n    }\n    statusAlarm = false;\n    context.set('status_alarm', statusAlarm);\n}\n\n// Work in mode auto\n//==================================================================\n\nlet currentStart = inputsStatus[4];\nsensorStart = flow.get('sensor_start') || 0;\nif(sensorStart !== currentStart) {\n    sensorStart = currentStart;\n    ledStart = sensorStart;\n    flow.set('sensor_start', sensorStart);\n    flow.set('led_start', ledStart);\n    let oddStart = context.get('odd_start') || false;\n    if(flow.get('led_start') === 1 && oddStart === false) {\n        counterStart = flow.get('counter_start') || 0;\n        counterStart ++;\n        flow.set('counter_start', counterStart);\n        stat = 4;\n        msg.count_start = counterStart;\n        msg1 = msg;\n        \n        oddStart = true;\n        context.set('odd_start', oddStart);\n    }\n    else {\n        oddStart = false;\n        context.set('odd_start', oddStart);\n    }\n}\n//if (flow.get('output_main') === 1) {\n    let currentMetal = inputsStatus[5];\n    sensorMetal = flow.get('sensor_metal') || 0;\n    if (sensorMetal !== currentMetal) {\n        sensorMetal = currentMetal;\n        ledMetal = sensorMetal;\n        flow.set('sensor_metal', sensorMetal);\n        flow.set('led_metal', ledMetal);\n        let oddMetal = context.get('odd_metal') || false;\n        if (flow.get('led_metal') === 1 && oddMetal === false) {\n            if (counterStart > 0) {\n\n                counterStart = flow.get('counter_start') || 0;\n                counterStart -= 1;\n                flow.set('counter_start', counterStart);\n                msg.count_start = counterStart;\n\n                counterMetal = global.get('counter_metal') || 0;\n                counterMetal++;\n                global.set('counter_metal', counterMetal);\n                msg.count_metal = counterMetal;\n\n                templCounterMetal = flow.get('templ_counter_metal');\n                templCounterMetal++;\n                flow.set('templ_counter_metal', templCounterMetal);\n                msg.templ_count_metal = templCounterMetal;\n\n                counterTotal = global.get('counter_total') || 0;\n                counterTotal++;\n                global.set('counter_total', counterTotal);\n                msg.count_total = counterTotal;\n                stat = 4;\n                msg1 = msg;\n                msg1.topic = \"metal/counter\";\n            }\n            oddMetal = true;\n            context.set('odd_metal', oddMetal);\n        } else {\n            oddMetal = false;\n            context.set('odd_metal', oddMetal);\n        }\n    }\n\n    let currentItem = inputsStatus[6];\n    sensorItem = flow.get('sensor_item') || 0;\n    if (sensorItem !== currentItem) {\n        sensorItem = currentItem;\n        ledItem = sensorItem;\n        flow.set('sensor_item', sensorItem);\n        flow.set('led_item', ledItem);\n        let oddItem = context.get('odd_item') || false;\n        if (flow.get('led_item') === 1 && oddItem === false) {\n            if (counterStart > 0 || templCounterMetal > 0) {\n                templCounterMetal = flow.get('templ_counter_metal');\n                let out = 0;\n                if (templCounterMetal > 0) {\n                    out = 1;\n                    templCounterMetal -= 1;\n                    flow.set('templ_counter_metal', templCounterMetal);\n                    msg.templ_count_metal = templCounterMetal;\n                } else {\n\n                    counterStart = flow.get('counter_start') || 0;\n                    counterStart -= 1;\n                    flow.set('counter_start', counterStart);\n                    msg.count_start = counterStart;\n\n                    counterItem = global.get('counter_item') || 0;\n                    counterItem++;\n                    global.set('counter_item', counterItem);\n                    msg.count_item = counterItem;\n                    \n                    counterTotal = global.get('counter_total') || 0;\n                    counterTotal++;\n                    global.set('counter_total', counterTotal);\n                    msg.count_total = counterTotal;\n                }\n\n                templCounterItem = flow.get('templ_counter_item');\n                templCounterItem.push(out);\n                flow.set('templ_counter_item', templCounterItem);\n                msg.templ_count_item = templCounterItem.length;\n                stat = 4;\n                msg1 = msg;\n                msg1.topic = \"item/counter\";\n            }\n            oddItem = true;\n            context.set('odd_item', oddItem);\n        } else {\n            oddItem = false;\n            context.set('odd_item', oddItem);\n        }\n    }\n\n\n    let currentCounter = inputsStatus[7];\n    sensorCounter = flow.get('sensor_counter') || 0;\n    if (sensorCounter !== currentCounter) {\n        sensorCounter = currentCounter;\n        ledCounter = sensorCounter;\n        flow.set('sensor_counter', sensorCounter);\n        flow.set('led_counter', ledCounter);\n\n        let oddCounter = context.get('odd_counter') || false;\n        if (flow.get('led_counter') === 1 && oddCounter === false) {\n\n            //if (workMode === 0) {\n                if (templCounterItem.length > 0) {\n\n                    templCounterItem = flow.get('templ_counter_item');\n                    let out = templCounterItem.shift();\n                    \n                    flow.set('templ_counter_item', templCounterItem);\n\n                    //counterCounter = flow.get('counter_counter') || [];\n                    //counterCounter.push(out);\n                    //flow.set('counter_counter', counterCounter);\n                    if(counterEnd.length === 0 || counterEnd.length > 0 && counterEnd[counterEnd.length - 1] === out){\n                        counterEnd = flow.get('counter_end') || [];\n                        counterEnd.push(out);\n                        flow.set('counter_end', counterEnd);\n                        if(out === 1){\n                            stat = 5;\n                        }\n                        else{\n                            stat = 6;\n                        }\n                    }\n                    if(counterEnd.length > 0 && counterEnd[counterEnd.length - 1] !== out){\n                        counterCounter = flow.get('counter_counter') || [];\n                        counterCounter.push(out);\n                        flow.set('counter_counter', counterCounter);\n                        flow.set('barrier_flag', true);\n                        getBarrier(2500);\n                        \n                    }\n                    \n                    \n                    \n                    \n                    counterEnd = flow.get('counter_end') || [];\n                    counterEnd.push(out);\n                    flow.set('counter_end', counterEnd);\n                }\n            //}\n\n            templCounterItem = flow.get('templ_counter_item');\n            counterCounter = flow.get('counter_counter');\n            counterEnd = flow.get('counter_end');\n\n            msg.templ_count_item = templCounterItem.length;\n            msg.count_counter = counterCounter.length;\n            msg.count_end = counterEnd.length;\n            msg1 = msg;\n            msg1.topic = \"counter/counter\";\n\n            // TODO: here output logic\n\n            //}\n            oddCounter = true;\n            context.set('odd_counter', oddCounter);\n        } else {\n            oddCounter = false;\n            context.set('odd_counter', oddCounter);\n        }\n\n    }\nif(flow.get('timer5') === 1){\n    stat = 3;\n    flow.set('timer5', 0);\n    flow.set('flag_end', true);\n    flow.set('flag_end_two', true);\n}\n\nif(flow.get('flag_end') === false && flow.get('flag_end_two') === true){\n    \n    getMetalEnd(2500);\n}\n\nif(flow.get('timer7') === 1){\n    counterCounter = flow.get('counter_counter') || [];\n    counterEnd = flow.get('counter_end') || [];\n    let out = counterCounter.shift();\n    counterEnd.push(out);\n    flow.set('counter_counter', counterCounter);\n    flow.set('counter_end', counterEnd);\n    flow.set('barrier_flag', false);\n    flow.set('timer7', 0);\n    flow.set('flag_end_two', false);\n    if(out === 1){\n        stat = 8;\n    }\n    else{\n        stat = 9;\n    }\n}\n\n\n\nif (flow.get('output_forward') === 1) {\n    let currentEndMetal = inputsStatus[8];\n    sensorEndMetal = flow.get('sensor_end_metal') || 0;\n    if (sensorEndMetal !== currentEndMetal) {\n        sensorEndMetal = currentEndMetal;\n        ledEndMetal = sensorEndMetal;\n        flow.set('sensor_end_metal', sensorEndMetal);\n        flow.set('led_end_metal', ledEndMetal);\n        let oddEndMetal = context.get('odd_end_metal') || false;\n        if (flow.get('led_end_metal') === 1 && oddEndMetal === false) {\n            \n            flow.set('flag_end', false);\n            counterEnd = flow.get('counter_end') || [];\n            counterEnd.shift();\n            flow.set('counter_end', counterEnd);\n\n            counterLiftMetal = global.get('counter_lift_metal') || 0;\n            counterLiftMetal++;\n            global.set('counter_lift_metal', counterLiftMetal);\n\n            flow.set('metal_output_flag', true);\n            flow.set('flag_end_metal', 1);\n\n            msg.count_counter = counterCounter.length;\n            msg.count_end = counterEnd.length;\n            msg.count_lift_metal = counterLiftMetal;\n            //}\n// TODO: here logic\n\n            msg1 = msg;\n            msg1.topic = \"lift_metal/counter\";\n\n            oddEndMetal = true;\n            context.set('odd_end_metal', oddEndMetal);\n        } else {\n            oddEndMetal = false;\n            context.set('odd_end_metal', oddEndMetal);\n        }\n    }\n}\n\n\nif (flow.get('output_backward') === 1) {\n    let currentEndItem = flow.get('flag') || 0;\n    sensorEndItem = flow.get('sensor_end_item') || 0;\n    if (sensorEndItem !== currentEndItem) {\n        sensorEndItem = currentEndItem;\n        ledEndItem = sensorEndItem;\n        flow.set('sensor_end_item', sensorEndItem);\n        flow.set('led_end_item', ledEndItem);\n\n        if (currentEndItem === 1) {\n            currentEndItem = 0;\n            flow.set('flag', currentEndItem);\n        }\n\n        let oddEndItem = context.get('odd_end_item') || false;\n        if (flow.get('led_end_item') === 1 && oddEndItem === false) {\n            //if (workMode === 0) {\n                if (counterCounter.length > 0 && counterEnd.length > 0 && counterEnd[0] === 0) {\n\n                    counterCounter = flow.get('counter_counter') || 0;\n                    counterCounter.shift();\n                    flow.set('counter_counter', counterCounter);\n                }\n            //}\n            counterEnd = flow.get('counter_end') || [];\n            counterEnd.shift();\n            flow.set('counter_end', counterEnd);\n\n            counterLiftItem = global.get('counter_lift_item') || 0;\n            counterLiftItem++;\n            global.set('counter_lift_item', counterLiftItem);\n\n            msg.count_counter = counterCounter.length;\n            msg.count_end = counterEnd.length;\n            msg.count_lift_item = counterLiftItem;\n\n// TODO: here logic\n\n            msg1 = msg;\n            msg1.topic = \"lift_item/counter\";\n            //}\n            oddEndItem = true;\n            context.set('odd_end_item', oddEndItem);\n        } else {\n            oddEndItem = false;\n            context.set('odd_end_item', oddEndItem);\n        }\n    }\n}\n\n\nlet currentEnable = inputsStatus[0];\noutputEnable = flow.get('output_enable') || 0;\nif(outputEnable !== currentEnable) {\n    outputEnable = currentEnable;\n    ledEnable = outputEnable;\n    flow.set('output_enable', outputEnable);\n    flow.set('led_enable', ledEnable);\n}\n\n// Auto\nif(localAuto !== ledAuto) {\n    ledAuto = localAuto;\n    flow.set('led_auto', ledAuto);\n}\n// Run\nif(localRun !== ledRun) {\n    ledRun = localRun;\n    flow.set('led_run', ledRun);\n}\n// EndItem sensor simulate\nif(localEndItem !== ledEndItem) {\n    ledEndItem = localEndItem;\n    flow.set('led_end_item', ledEndItem);\n}\n\noutputMain = inputsStatus[1];\nlet currentMain = flow.get('output_main') || 0;\nif(outputMain !== currentMain) {\n    currentMain = outputMain;\n    ledMain = currentMain;\n    flow.set('output_main', currentMain);\n    flow.set('led_main', ledMain);\n}\n\noutputForward = inputsStatus[2];\nlet currentForward = flow.get('output_forward') || 0;\nif(outputForward !== currentForward) {\n    currentForward = outputForward;\n    ledForward = currentForward;\n    flow.set('output_forward', currentForward);\n    flow.set('led_forward', ledForward);\n}\n\noutputBackward = inputsStatus[3];\nlet currentBackward = flow.get('output_backward') || 0;\nif(outputBackward !== currentBackward) {\n    currentBackward = outputBackward;\n    ledBackward = currentBackward;\n    flow.set('output_backward', currentBackward);\n    flow.set('led_backward', ledBackward);\n}\n\nbuttonEnable = flow.get('button_enable') || 0;\nif(buttonEnable === 1) {\n    if(outputEnable === 1) {\n        outputEnable = 0;\n    }\n    else {\n        outputEnable = 1;\n    }\n\n    flow.set('output_enable', outputEnable);\n    buttonEnable = 0;\n    flow.set('button_enable', buttonEnable);\n\n    outputsMatrix = flow.get('outputs_matrix');\n    outputsMatrix[0] = outputEnable;\n    flow.set('outputs_matrix', outputsMatrix);\n\n    msg2 = confirmOutputs(outputsMatrix);\n}\n\nbuttonReset = flow.get('button_reset') || 0;\nif(buttonReset === 1) {\n    flow.set('counter_start', 0);\n    flow.set('templ_counter_metal', 0);\n    flow.set('templ_counter_item', []);\n    flow.set('counter_counter', []);\n    flow.set('counter_end', []);\n    flow.set('local_auto', 0);\n    flow.set('local_run', 0);\n    timer1 = 0;\n    flow.set('timer1', timer1);\n    timer2 = 0;\n    flow.set('timer2', timer2);\n    timer3 = 0;\n    flow.set('timer3', timer3);\n    timer4 = 0;\n    flow.set('timer4', timer4);\n    delay1 = 0;\n    flow.set('delay1', delay1);\n    delay2 = 0;\n    flow.set('delay2', delay2);\n    delay3 = 0;\n    flow.set('delay3', delay3);\n    delay4 = 0;\n    flow.set('delay4', delay4);\n    delay5 = 0;\n    flow.set('delay5', delay5);\n    delay6 = 0;\n    flow.set('delay6', delay6);\n    flow.set('barrier_flag', false);\n    flow.set('action', false);\n    global.set('counter_total', 0);\n    global.set('counter_metal', 0);\n    global.set('counter_item', 0);\n    global.set('counter_lift_metal', 0);\n    global.set('counter_lift_item', 0);\n\n    let initialArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    msg1 = initialMessage(msg, initialArray);\n    msg1.topic = \"system/reset\";\n    msg1.alarm = 0;\n\n    outputsMatrix = [0, 0, 0, 0];\n    flow.set('outputs_matrix', outputsMatrix);\n    msg2 = confirmOutputs(outputsMatrix);\n    msg2.topic = \"system/reset\";\n\n    buttonReset = 0;\n    flow.set('button_reset', buttonReset);\n}\n\noutputEnable = flow.get('output_enable') || 0;\nbuttonAuto = flow.get('button_auto') || 0;\nif(buttonAuto === 1) {\n    if(localAuto === 1) {\n        localAuto = 0;\n    }\n    else {\n        localAuto = 1;\n    }\n    flow.set('local_auto', localAuto);\n    buttonAuto = 0;\n    flow.set('button_auto', buttonAuto);\n}\n\nbuttonRun = flow.get('button_run') || 0;\nif(buttonRun === 1) {\n    if(localRun === 1) {\n        localRun = 0;\n    }\n    else {\n        localRun = 1;\n    }\n    flow.set('local_run', localRun);\n    buttonRun = 0;\n    flow.set('button_run', buttonRun);\n}\n\nworkMode = flow.get('local_auto') || 0;\nif (workMode === 0) {\n    buttonMain = flow.get('button_main') || 0;\n    if (buttonMain === 1) {\n        if (outputMain === 1) {\n            outputMain = 0;\n        } else {\n            outputMain = 1;\n        }\n        flow.set('output_main', outputMain);\n        buttonMain = 0;\n        flow.set('button_main', buttonMain);\n\n        outputsMatrix = flow.get('outputs_matrix');\n        outputsMatrix[1] = outputMain;\n        flow.set('outputs_matrix', outputsMatrix);\n\n        msg2 = confirmOutputs(outputsMatrix);\n    }\n\n    buttonForward = flow.get('button_forward') || 0;\n    if (buttonForward === 1) {\n        if (outputForward === 1) {\n            outputForward = 0;\n        } else {\n            outputForward = 1;\n        }\n        flow.set('output_forward', outputForward);\n        buttonForward = 0;\n        flow.set('button_forward', buttonForward);\n\n        outputsMatrix = flow.get('outputs_matrix');\n        outputsMatrix[2] = outputForward;\n        flow.set('outputs_matrix', outputsMatrix);\n\n        msg2 = confirmOutputs(outputsMatrix);\n    }\n\n    buttonBackward = flow.get('button_backward') || 0;\n    if (buttonBackward === 1) {\n        if (outputBackward === 1) {\n            outputBackward = 0;\n        } else {\n            outputBackward = 1;\n        }\n        flow.set('output_backward', outputBackward);\n        buttonBackward = 0;\n        flow.set('button_backward', buttonBackward);\n\n        outputsMatrix = flow.get('outputs_matrix');\n        outputsMatrix[3] = outputBackward;\n        flow.set('outputs_matrix', outputsMatrix);\n\n        msg2 = confirmOutputs(outputsMatrix);\n    }\n}\nelse {\n     \n    //msg1 = msg;\n    //stat = runInAutoMode();\n   \n    //msg.topic = \"1147\";\n    //msg.payload = \"stat: \" + stat;\n    //node.send(msg);\n    /*if(flow.get('delay5') === 1){\n        //msg.topic = \"1151\";\n        // msg.payload = 2;\n        //node.send(msg);\n        stat = 3;\n        flow.set('delay5', 0);\n    }\n    if(flow.get('delay6') === 1){\n        //msg.topic = \"1158\";\n        //msg.payload = 3;\n        // node.send(msg);\n        stat = 3;\n        flow.set('delay6', 0);\n    }\n    if(flow.get('delay7') === 1){\n        //msg.topic = \"1165\";\n        // msg.payload = 4;\n        //node.send(msg);\n        stat = 7;\n        flow.set('delay7', 0);\n        flow.set('metal_output_flag', false);\n    }*/\n    if(stat === undefined || stat === null){\n        stat = 1000;\n    }\n    \n    let matrix = flow.get('outputs_matrix') || [];\n    let current = inputsStatus.slice(0, 4);\n    let output = getMatrix(stat, matrix);\n    if(current !== undefined && current !== null && output !== undefined && output !== null) {\n        if(current.join(',') === output.join(',')) {\n            msg2 = null;\n        }\n        else {\n\n            flow.set('outputs_matrix', output);\n            msg2 = confirmOutputs(output);\n            msg2.topic = \"run/auto/auto\";\n        }\n    }\n\n    /*let matrix = flow.get('outputs_matrix') || [];\n    delay1 = flow.get('delay1') || 0;\n    let current = inputsStatus.slice(0, 4);\n    let output = runAuto(matrix, counterEnd, counterStart, templCounterMetal, templCounterItem);\n\n    if(current !== undefined && current !== null && output !== undefined && output !== null) {\n        if(current.join(',') === output.join(',')) {\n            msg2 = null;\n        }\n        else {\n\n            flow.set('outputs_matrix', output);\n            msg2 = confirmOutputs(output);\n            msg2.topic = \"run/auto\";\n        }\n    }*/\n\n\n}\n\nbuttonStart = flow.get('button_start') || 0;\nif(buttonStart === 1) {\n    if(sensorStart === 1) {\n        sensorStart = 0;\n    }\n    else {\n        sensorStart = 1;\n    }\n    flow.set('sensor_start', sensorStart);\n    buttonStart = 0;\n    flow.set('button_start', buttonStart);\n\n    inputsMatrix = flow.get('inputs_matrix');\n    inputsMatrix[0] = sensorStart;\n    flow.set('inputs_matrix', inputsMatrix);\n\n    msg3 = confirmInputs(inputsMatrix);\n}\n\nbuttonMetal = flow.get('button_metal') || 0;\nif(buttonMetal === 1) {\n    if(sensorMetal === 1) {\n        sensorMetal = 0;\n    }\n    else {\n        sensorMetal = 1;\n    }\n    flow.set('sensor_metal', sensorMetal);\n    buttonMetal = 0;\n    flow.set('button_metal', buttonMetal);\n\n    inputsMatrix = flow.get('inputs_matrix');\n    inputsMatrix[1] = sensorMetal;\n    flow.set('inputs_matrix', inputsMatrix);\n\n    msg3 = confirmInputs(inputsMatrix);\n}\n\nbuttonItem = flow.get('button_item') || 0;\nif(buttonItem === 1) {\n    if(sensorItem === 1) {\n        sensorItem = 0;\n    }\n    else {\n        sensorItem = 1;\n    }\n    flow.set('sensor_item', sensorItem);\n    buttonItem = 0;\n    flow.set('button_item', buttonItem);\n\n    inputsMatrix = flow.get('inputs_matrix');\n    inputsMatrix[2] = sensorItem;\n    flow.set('inputs_matrix', inputsMatrix);\n\n    msg3 = confirmInputs(inputsMatrix);\n}\n\nbuttonCounter = flow.get('button_counter') || 0;\nif(buttonCounter === 1) {\n    if(sensorCounter === 1) {\n        sensorCounter = 0;\n    }\n    else {\n        sensorCounter = 1;\n    }\n    flow.set('sensor_counter', sensorCounter);\n    buttonCounter = 0;\n    flow.set('button_counter', buttonCounter);\n\n    inputsMatrix = flow.get('inputs_matrix');\n    inputsMatrix[3] = sensorCounter;\n    flow.set('inputs_matrix', inputsMatrix);\n\n    msg3 = confirmInputs(inputsMatrix);\n}\n\nbuttonEndMetal = flow.get('button_end_metal') || 0;\nif(buttonEndMetal === 1) {\n    if(sensorEndMetal === 1) {\n        sensorEndMetal = 0;\n    }\n    else {\n        sensorEndMetal = 1;\n    }\n    flow.set('sensor_end_metal', sensorEndMetal);\n    buttonEndMetal = 0;\n    flow.set('button_end_metal', buttonEndMetal);\n\n    inputsMatrix = flow.get('inputs_matrix');\n    inputsMatrix[4] = sensorEndMetal;\n    flow.set('inputs_matrix', inputsMatrix);\n\n    msg3 = confirmInputs(inputsMatrix);\n}\n\nbuttonEndItem = flow.get('button_end_item') || 0;\nif(buttonEndItem === 1) {\n    if(sensorEndItem === 1) {\n        sensorEndItem = 0;\n    }\n    else {\n        sensorEndItem = 1;\n    }\n    flow.set('sensor_end_item', sensorEndItem);\n\n    buttonEndItem = 0;\n    flow.set('button_end_item', buttonEndItem);\n\n    flagEndItem = sensorEndItem;\n    flow.set('flag_end_item', flagEndItem);\n\n    localEndItem = sensorEndItem;\n    flow.set('local_end_item', localEndItem);\n}\n\n// noinspection JSAnnotator\nreturn [ msg, msg1, msg2, msg3 ];","outputs":4,"noerr":0,"x":90,"y":660,"wires":[["9c665e6e.fd16d"],["99c80ecc.b904c"],["cd3728c7.d35698"],["cd3728c7.d35698"]]},{"id":"3e8eff61.aa66f","type":"function","z":"afbd208.aeec8e","name":"Backward","func":"let workMode = flow.get('local_auto') || 0;\nlet forward = flow.get('output_forward') || 0;\nif(workMode === 0 && forward === 0) {\n    flow.set('button_backward', 1);\n}","outputs":1,"noerr":0,"x":470,"y":2040,"wires":[[]]},{"id":"a20d87b8.834cb8","type":"debug","z":"afbd208.aeec8e","name":"ERROR","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":320,"y":20,"wires":[]},{"id":"6a9ebdec.d077f4","type":"inject","z":"afbd208.aeec8e","name":"","topic":"","payload":"1","payloadType":"num","repeat":"","crontab":"","once":true,"onceDelay":0.1,"x":130,"y":100,"wires":[["13b21768.187739"]]},{"id":"cabaee04.88a51","type":"catch","z":"afbd208.aeec8e","name":"CATCH ERROR","scope":null,"uncaught":false,"x":140,"y":20,"wires":[["a20d87b8.834cb8"]]},{"id":"13b21768.187739","type":"function","z":"afbd208.aeec8e","name":"Initial","func":"if(msg.payload === 1) {\n    flow.set('initial', 1);\n    \n}\nelse {\n    flow.set('initial', 0);\n    return null;\n}\nreturn msg;","outputs":1,"noerr":0,"x":270,"y":100,"wires":[["73e60b56.695754"]]},{"id":"73e60b56.695754","type":"change","z":"afbd208.aeec8e","name":"","rules":[{"t":"change","p":"payload","pt":"msg","from":"1","fromt":"num","to":"0","tot":"num"}],"action":"","property":"","from":"","to":"","reg":false,"x":460,"y":100,"wires":[["5823a671.96f138"]]},{"id":"5823a671.96f138","type":"delay","z":"afbd208.aeec8e","name":"50ms","pauseType":"delay","timeout":"50","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":640,"y":100,"wires":[["13b21768.187739"]]},{"id":"7997eca5.2b10f4","type":"comment","z":"afbd208.aeec8e","name":"Error Catch","info":"Catchig every error in groups.","x":90,"y":60,"wires":[]},{"id":"e34fbd86.147f6","type":"comment","z":"afbd208.aeec8e","name":"Initial","info":"Initializing displays with I/O data at startup.","x":70,"y":140,"wires":[]},{"id":"39cd0546.f0655a","type":"comment","z":"afbd208.aeec8e","name":"Read","info":"Reads data from the server.","x":70,"y":400,"wires":[]},{"id":"832528b3.ccd548","type":"comment","z":"afbd208.aeec8e","name":"Write Outputs","info":"Writes data to the server's outputs.","x":90,"y":2080,"wires":[]},{"id":"559b19df.9137d8","type":"function","z":"afbd208.aeec8e","name":"Auto/Man","func":"let status = context.get('status') || 0;\nlet isFirst = flow.get('initial') || 0;\nlet input = flow.get('led_auto') || 0;\nif(isFirst === 1) {\n        if(input === 0) {\n            msg.payload = \"OFF\";\n            msg.color = \"red\";\n            context.set('status', 0);\n            return msg;\n        }\n        else {\n            msg.payload = \"ON\";\n            msg.color = \"lime\";\n            context.set('status', 1);\n            return msg;\n        }\n}\nelse {\n    if(input === status) {\n        return null;\n    }\n    else if(input === 1) {\n       msg.payload = \"ON\";\n        msg.color = \"lime\";\n        context.set('status', 1);\n        return msg; \n    }\n    else {\n        msg.payload = \"OFF\";\n        msg.color = \"red\";\n        context.set('status', 0);\n        return msg;\n    }\n}\nreturn null;","outputs":1,"noerr":0,"x":420,"y":480,"wires":[["e196ca.1588a938"]]},{"id":"848224a4.f47ad8","type":"function","z":"afbd208.aeec8e","name":"Enable","func":"flow.set('button_enable', 1);","outputs":1,"noerr":0,"x":470,"y":1840,"wires":[[]]},{"id":"6c29737a.f423dc","type":"function","z":"afbd208.aeec8e","name":"Reset","func":"flow.set('button_reset', 1);\nreturn msg;","outputs":1,"noerr":0,"x":460,"y":1800,"wires":[[]]},{"id":"105f31f2.d7c58e","type":"comment","z":"afbd208.aeec8e","name":"Write Inputs","info":"Writes data to the server's inputs.","x":90,"y":2380,"wires":[]},{"id":"cb08436f.31777","type":"function","z":"afbd208.aeec8e","name":"gl/limit","func":"global.set('lift_limit', msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":310,"y":1460,"wires":[["4f5f332.ea297cc"]]},{"id":"78367b47.4a9204","type":"function","z":"afbd208.aeec8e","name":"alm","func":"let status = context.get('status') || -1;\nif(msg.alarm === undefined) {\n    return null;\n}\nlet input = msg.alarm;\nif(input !== status) {\n    if(input === 1) {\n        msg.color = \"red\";\n        msg.payload = \"the elevator limit is reached\"\n    }\n    else {\n        msg.color = \"lime\";\n        msg.payload = \"OK\"\n    }\n    context.set('status', input);\n    return msg;\n}","outputs":1,"noerr":0,"x":290,"y":1320,"wires":[["846e42f5.9ec08","b993e63c.98ca28"]]},{"id":"3ecf5f1c.a3ae","type":"mqtt out","z":"afbd208.aeec8e","name":"SCADA Output","topic":"scada","qos":"","retain":"","broker":"55f51a4c.00dbe4","x":690,"y":1410,"wires":[]},{"id":"9b6cbdbb.90086","type":"mqtt in","z":"afbd208.aeec8e","name":"Scada Input","topic":"scada/view","qos":"2","datatype":"auto","broker":"55f51a4c.00dbe4","x":120,"y":1470,"wires":[["bf58b636.36b408"]]},{"id":"bf58b636.36b408","type":"json","z":"afbd208.aeec8e","name":"Json","property":"payload","action":"","pretty":false,"x":100,"y":1540,"wires":[["819a5d4b.daef8"]]},{"id":"819a5d4b.daef8","type":"switch","z":"afbd208.aeec8e","name":"","property":"payload.topic","propertyType":"msg","rules":[{"t":"eq","v":"button/limit","vt":"str"},{"t":"eq","v":"system/reset","vt":"str"},{"t":"eq","v":"button/auto","vt":"str"},{"t":"eq","v":"button/main","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":100,"y":1620,"wires":[["4c9f3004.9edd"],["ccd8b20e.9d269"],["81b21a95.6a6f68"],["4a5e32e9.ef2f6c"]]},{"id":"4a5e32e9.ef2f6c","type":"change","z":"afbd208.aeec8e","name":"MAIN","rules":[{"t":"set","p":"topic","pt":"msg","to":"button/main","tot":"str"},{"t":"set","p":"payload","pt":"msg","to":"1","tot":"num"}],"action":"","property":"","from":"","to":"","reg":false,"x":240,"y":1690,"wires":[["2ededd48.f430a2"]]},{"id":"81b21a95.6a6f68","type":"change","z":"afbd208.aeec8e","name":"AUTO","rules":[{"t":"set","p":"topic","pt":"msg","to":"button/auto","tot":"str"},{"t":"set","p":"payload","pt":"msg","to":"1","tot":"num"}],"action":"","property":"","from":"","to":"","reg":false,"x":240,"y":1650,"wires":[["84d859ac.1ee838"]]},{"id":"ccd8b20e.9d269","type":"change","z":"afbd208.aeec8e","name":"Reset","rules":[{"t":"set","p":"topic","pt":"msg","to":"system/reset","tot":"str"},{"t":"set","p":"payload","pt":"msg","to":"1","tot":"num"}],"action":"","property":"","from":"","to":"","reg":false,"x":240,"y":1610,"wires":[["6c29737a.f423dc"]]},{"id":"4c9f3004.9edd","type":"change","z":"afbd208.aeec8e","name":"Limit","rules":[{"t":"set","p":"topic","pt":"msg","to":"button/limit","tot":"str"},{"t":"set","p":"payload","pt":"msg","to":"payload.value","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":240,"y":1570,"wires":[["e03188dd.73e028"]]},{"id":"eb25aad6.d9ac28","type":"function","z":"afbd208.aeec8e","name":"Start Counter","func":"msg.payload = {\n    \"value\": msg.count_start,\n    \"topic\": \"start/counter\"\n}\nreturn msg;","outputs":1,"noerr":0,"x":670,"y":960,"wires":[["49f1ec4f.7fa664"]]},{"id":"b993e63c.98ca28","type":"function","z":"afbd208.aeec8e","name":"Alarm Message","func":"let textColor = \"black\";\nif(msg.color === \"red\") {\n    textColor = \"white\";\n}\nmsg.payload = {\n    \"value\": msg.payload,\n    \"topic\": \"lift/alarm\",\n    \"color\": msg.color,\n    \"textColor\": textColor\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":680,"y":1320,"wires":[["49f1ec4f.7fa664"]]},{"id":"f42c794d.400d28","type":"function","z":"afbd208.aeec8e","name":"Lift Metal Counter","func":"msg.payload = {\n    \"value\": msg.count_lift_metal,\n    \"topic\": \"lift_metal/counter\"\n}\nreturn msg;","outputs":1,"noerr":0,"x":690,"y":1240,"wires":[["49f1ec4f.7fa664"]]},{"id":"8890618a.d71fd","type":"function","z":"afbd208.aeec8e","name":"Lift Item Counter","func":"msg.payload = {\n    \"value\": msg.count_lift_item,\n    \"topic\": \"lift_item/counter\"\n}\nreturn msg;","outputs":1,"noerr":0,"x":690,"y":1280,"wires":[["49f1ec4f.7fa664"]]},{"id":"37a34097.07291","type":"function","z":"afbd208.aeec8e","name":"End Position Counter","func":"msg.payload = {\n    \"value\": msg.count_end,\n    \"topic\": \"end_pos/counter\"\n}\nreturn msg;","outputs":1,"noerr":0,"x":700,"y":1200,"wires":[["49f1ec4f.7fa664"]]},{"id":"eed0caa3.d89788","type":"function","z":"afbd208.aeec8e","name":"Inputs-setting","func":"let inputs = msg.payload;\nflow.set('inputs_status', inputs);","outputs":1,"noerr":0,"x":370,"y":230,"wires":[[]]},{"id":"dc00800b.0accf","type":"function","z":"afbd208.aeec8e","name":"buff","func":"let last = context.get('last_start') || -1;\nlet current = msg.count_start;\nif(msg.count_start === undefined) {\n    return [null, null];\n}\nif(current !== last) {\n    context.set('last_start', current);\n    return [ msg, msg ];\n}","outputs":2,"noerr":0,"x":290,"y":960,"wires":[["ce5b215e.ed11a"],["eb25aad6.d9ac28"]]},{"id":"43212ce4.9fdcf4","type":"function","z":"afbd208.aeec8e","name":"buff","func":"let last = context.get('last_end') || -1;\nlet current = msg.count_end;\nif(msg.count_end === undefined) {\n    return [null, null];\n}\nif(current !== last) {\n    context.set('last_end', current);\n    return [ msg, msg ];\n}","outputs":2,"noerr":0,"x":290,"y":1200,"wires":[["52ba4a95.f8ca44"],["37a34097.07291"]]},{"id":"1661c513.69eb2b","type":"function","z":"afbd208.aeec8e","name":"buff","func":"let status = context.get('status') || -1;\nlet input = msg.count_lift_metal;\nif(msg.count_lift_metal === undefined) {\n    return [null, null];\n}\nif(input !== status) {\n    context.set('status', input);\n    return [msg, msg];\n}","outputs":2,"noerr":0,"x":290,"y":1240,"wires":[["d644a5bb.6b6a38"],["f42c794d.400d28"]]},{"id":"8a63f7be.bc05d8","type":"function","z":"afbd208.aeec8e","name":"buff","func":"let status = context.get('status') || -1;\nif(msg.count_lift_item === undefined) {\n    return [null, null];\n}\nlet input = msg.count_lift_item;\nif(input !== status) {\n    context.set('status', input);\n    return [msg, msg];\n}","outputs":2,"noerr":0,"x":290,"y":1280,"wires":[["ac45e051.ca544"],["8890618a.d71fd"]]},{"id":"4f5f332.ea297cc","type":"function","z":"afbd208.aeec8e","name":"limit for scada","func":"msg.payload = {\n    \"value\":msg.payload,\n    \"topic\":\"button/limit\"\n}\nreturn msg;","outputs":1,"noerr":0,"x":340,"y":1410,"wires":[["49f1ec4f.7fa664"]]},{"id":"43c6379b.5d2278","type":"function","z":"afbd208.aeec8e","name":"buff","func":"let last = context.get('last_metal') || -1;\nlet current = msg.count_metal;\nif(msg.count_metal === undefined) {\n    return [null, null];\n}\nif(current !== last) {\n    context.set('last_metal', current);\n    return [ msg, msg ];\n}","outputs":2,"noerr":0,"x":290,"y":1040,"wires":[["a4b9f1df.0290f"],["16cf12a4.e31bed"]]},{"id":"16cf12a4.e31bed","type":"function","z":"afbd208.aeec8e","name":"Metal Counter","func":"msg.payload = {\n    \"value\": msg.count_metal,\n    \"topic\": \"metal/counter\"\n}\nreturn msg;","outputs":1,"noerr":0,"x":680,"y":1040,"wires":[["49f1ec4f.7fa664"]]},{"id":"41f3c22a.b3a75c","type":"function","z":"afbd208.aeec8e","name":"buff","func":"let last = context.get('last_item') || -1;\nlet current = msg.count_item;\nif(msg.count_item === undefined) {\n    return [null, null];\n}\nif(current !== last) {\n    context.set('last_item', current);\n    return [ msg, msg ];\n}","outputs":2,"noerr":0,"x":290,"y":1120,"wires":[["c5bf5654.54b098"],["b8ad290e.e2f008"]]},{"id":"7e133a52.e16f64","type":"function","z":"afbd208.aeec8e","name":"buff","func":"let last = context.get('last_total') || -1;\nlet current = msg.count_total;\nif(msg.count_total === undefined) {\n    return [null, null];\n}\nif(current !== last) {\n    context.set('last_total', current);\n    return [ msg, msg ];\n}","outputs":2,"noerr":0,"x":290,"y":1160,"wires":[["4b0be785.670078"],["1c1e11b6.24a51e"]]},{"id":"b8ad290e.e2f008","type":"function","z":"afbd208.aeec8e","name":"Item Counter","func":"msg.payload = {\n    \"value\": msg.count_item,\n    \"topic\": \"nonmetal/counter\"\n}\nreturn msg;","outputs":1,"noerr":0,"x":670,"y":1120,"wires":[["49f1ec4f.7fa664"]]},{"id":"1c1e11b6.24a51e","type":"function","z":"afbd208.aeec8e","name":"Total Counter","func":"msg.payload = {\n    \"value\": msg.count_total,\n    \"topic\": \"total/counter\"\n}\nreturn msg;","outputs":1,"noerr":0,"x":670,"y":1160,"wires":[["49f1ec4f.7fa664"]]},{"id":"e14e3e8c.195a9","type":"function","z":"afbd208.aeec8e","name":"initial-addresses","func":"msg.payload = { \n    'fc': 3,\n    'unitid': 1,\n    'address': 16384 ,\n    'quantity': 9\n}\nreturn msg;","outputs":1,"noerr":0,"x":160,"y":300,"wires":[["43acefbe.75271"]]},{"id":"e1ab483a.1487d8","type":"inject","z":"afbd208.aeec8e","name":"","topic":"","payload":"","payloadType":"date","repeat":"0.05","crontab":"","once":false,"onceDelay":0.1,"x":150,"y":340,"wires":[["e14e3e8c.195a9","4d74864f.8b0578"]]},{"id":"18602c31.f25564","type":"function","z":"afbd208.aeec8e","name":"Run","func":"let status = context.get('status') || 0;\nlet isFirst = flow.get('initial') || 0;\nlet input = flow.get('led_run') || 0;\nif(isFirst === 1) {\n        if(input === 0) {\n            msg.payload = \"OFF\";\n            msg.color = \"red\";\n            context.set('status', 0);\n            return msg;\n        }\n        else {\n            msg.payload = \"ON\";\n            msg.color = \"lime\";\n            context.set('status', 1);\n            return msg;\n        }\n}\nelse {\n    if(input === status) {\n        return null;\n    }\n    else if(input === 1) {\n       msg.payload = \"ON\";\n        msg.color = \"lime\";\n        context.set('status', 1);\n        return msg; \n    }\n    else {\n        msg.payload = \"OFF\";\n        msg.color = \"red\";\n        context.set('status', 0);\n        return msg;\n    }\n}\nreturn null;","outputs":1,"noerr":0,"x":410,"y":520,"wires":[["652e009a.a63e1"]]},{"id":"6387491d.5d6d38","type":"function","z":"afbd208.aeec8e","name":"End Item","func":"let status = context.get('status') || 0;\nlet isFirst = flow.get('initial') || 0;\nlet input = flow.get('led_end_item') || 0;\nif(isFirst === 1) {\n        if(input === 0) {\n            msg.payload = \"OFF\";\n            msg.color = \"red\";\n            context.set('status', 0);\n            return msg;\n        }\n        else {\n            msg.payload = \"ON\";\n            msg.color = \"lime\";\n            context.set('status', 1);\n            return msg;\n        }\n}\nelse {\n    if(input === status) {\n        return null;\n    }\n    else if(input === 1) {\n       msg.payload = \"ON\";\n        msg.color = \"lime\";\n        context.set('status', 1);\n        return msg; \n    }\n    else {\n        msg.payload = \"OFF\";\n        msg.color = \"red\";\n        context.set('status', 0);\n        return msg;\n    }\n}\nreturn null;","outputs":1,"noerr":0,"x":420,"y":880,"wires":[["fb352634.eef498"]]},{"id":"9c665e6e.fd16d","type":"function","z":"afbd208.aeec8e","name":"buff","func":"return msg;","outputs":1,"noerr":0,"x":100,"y":600,"wires":[["15c2c419.8f7cec","559b19df.9137d8","18602c31.f25564","2b263ebe.7d41f2","6f91fea3.7aa4f","da3ba53d.3e5318","d951f6da.1e9d48","cc9b85a0.171468","ab030d7d.e7e6c","2541f886.8d4508","dd430ea6.2635d","6387491d.5d6d38"]]},{"id":"99c80ecc.b904c","type":"function","z":"afbd208.aeec8e","name":"buff","func":"\nreturn msg;","outputs":1,"noerr":0,"x":110,"y":1100,"wires":[["1661c513.69eb2b","43212ce4.9fdcf4","dc00800b.0accf","8a63f7be.bc05d8","78367b47.4a9204","43c6379b.5d2278","41f3c22a.b3a75c","7e133a52.e16f64","4b801a84.050f14","48244066.58fcb"]]},{"id":"c8c19f9b.16d9f","type":"function","z":"afbd208.aeec8e","name":"Run","func":"flow.set('button_run', 1);","outputs":1,"noerr":0,"x":460,"y":1880,"wires":[[]]},{"id":"84d859ac.1ee838","type":"function","z":"afbd208.aeec8e","name":"Auto","func":"flow.set('button_auto', 1);","outputs":1,"noerr":0,"x":460,"y":1920,"wires":[[]]},{"id":"8ef00186.44d33","type":"function","z":"afbd208.aeec8e","name":"End Item","func":"flow.set('button_end_item', 1);","outputs":1,"noerr":0,"x":470,"y":2340,"wires":[[]]},{"id":"4b801a84.050f14","type":"function","z":"afbd208.aeec8e","name":"buff","func":"let last = context.get('last_temp_metal') || -1;\nlet current = msg.templ_count_metal;\nif(msg.templ_count_metal === undefined) {\n    return [null, null];\n}\nif(current !== last) {\n    context.set('last_temp_metal', current);\n    return [ msg, msg ];\n}","outputs":2,"noerr":0,"x":290,"y":1000,"wires":[["f48688d5.473c08"],["3174f7e8.d7a788"]]},{"id":"3174f7e8.d7a788","type":"function","z":"afbd208.aeec8e","name":"Templ Metal Counter","func":"msg.payload = {\n    \"value\": msg.templ_count_metal,\n    \"topic\": \"templ/metal_counter\"\n}\nreturn msg;","outputs":1,"noerr":0,"x":700,"y":1000,"wires":[["49f1ec4f.7fa664"]]},{"id":"48244066.58fcb","type":"function","z":"afbd208.aeec8e","name":"buff","func":"let last = context.get('last_templ_item') || -1;\nlet current = msg.templ_count_item;\nif(msg.templ_count_item === undefined) {\n    return [null, null];\n}\nif(current !== last) {\n    context.set('last_templ_item', current);\n    return [ msg, msg ];\n}","outputs":2,"noerr":0,"x":290,"y":1080,"wires":[["71f2ccfd.10d924"],["62390ff.e013ff"]]},{"id":"62390ff.e013ff","type":"function","z":"afbd208.aeec8e","name":"Templ Item Counter","func":"msg.payload = {\n    \"value\": msg.templ_count_item,\n    \"topic\": \"templ/item_counter\"\n}\nreturn msg;","outputs":1,"noerr":0,"x":690,"y":1080,"wires":[["49f1ec4f.7fa664"]]},{"id":"7313e87a.b52bd8","type":"function","z":"afbd208.aeec8e","name":"end-item-flag","func":"let action = flow.get('flag_end_item') || 0;\nif(action === 1) {\n    action = 0;\n    flow.set('flag_end_item', action);\n    msg.payload = 1;\n    return msg;\n}\nreturn null;","outputs":1,"noerr":0,"x":470,"y":400,"wires":[["703b1dc4.4cd194"]]},{"id":"703b1dc4.4cd194","type":"function","z":"afbd208.aeec8e","name":"flag = 1","func":"flow.set('flag', 1);\n","outputs":1,"noerr":0,"x":640,"y":400,"wires":[[]]},{"id":"ed4bd6ff.2026f8","type":"modbus-response","z":"afbd208.aeec8e","name":"","registerShowMax":20,"x":170,"y":190,"wires":[]},{"id":"43acefbe.75271","type":"modbus-flex-getter","z":"afbd208.aeec8e","name":"Input_Registers","showStatusActivities":false,"showErrors":false,"logIOActivities":false,"server":"d368dd4d.3809","useIOFile":false,"ioFile":"","useIOForPayload":false,"x":160,"y":240,"wires":[["eed0caa3.d89788"],["ed4bd6ff.2026f8"]]},{"id":"cd3728c7.d35698","type":"modbus-flex-write","z":"afbd208.aeec8e","name":"","showStatusActivities":false,"showErrors":false,"server":"d368dd4d.3809","x":130,"y":740,"wires":[[],[]]},{"id":"e03188dd.73e028","type":"ui_numeric","z":"afbd208.aeec8e","name":"limit","label":"Lift limit","tooltip":"","group":"6d21ff54.35ea7","order":12,"width":0,"height":0,"passthru":false,"topic":"limit/display","format":"{{value}}","min":"1","max":"15","step":1,"x":310,"y":1510,"wires":[["cb08436f.31777"]]},{"id":"dbb3a1ed.8e7af","type":"ui_button","z":"afbd208.aeec8e","name":"button/enable","group":"6d21ff54.35ea7","order":2,"width":3,"height":1,"passthru":false,"label":"ENABLE","tooltip":"","color":"black","bgcolor":"orange","icon":"","payload":"1","payloadType":"num","topic":"button/enable","x":140,"y":1840,"wires":[["848224a4.f47ad8"]]},{"id":"75226e9d.cb924","type":"ui_button","z":"afbd208.aeec8e","name":"button/backward","group":"6d21ff54.35ea7","order":8,"width":3,"height":1,"passthru":false,"label":"BACKWARD","tooltip":"","color":"","bgcolor":"","icon":"","payload":"1","payloadType":"num","topic":"button/backward","x":140,"y":2040,"wires":[["3e8eff61.aa66f"]]},{"id":"6b70118c.57a34","type":"ui_button","z":"afbd208.aeec8e","name":"button/forward","group":"6d21ff54.35ea7","order":6,"width":3,"height":1,"passthru":false,"label":"FORWARD","tooltip":"","color":"","bgcolor":"","icon":"","payload":"1","payloadType":"num","topic":"button/forward","x":140,"y":2000,"wires":[["578c115f.c5aa8"]]},{"id":"42d928b9.d3d808","type":"ui_button","z":"afbd208.aeec8e","name":"button/main","group":"6d21ff54.35ea7","order":4,"width":3,"height":1,"passthru":true,"label":"MAIN","tooltip":"","color":"","bgcolor":"","icon":"","payload":"1","payloadType":"num","topic":"button/main","x":130,"y":1960,"wires":[["2ededd48.f430a2"]]},{"id":"1eeea46f.70248c","type":"ui_button","z":"afbd208.aeec8e","name":"button/A#M","group":"6d21ff54.35ea7","order":10,"width":3,"height":1,"passthru":false,"label":"Auto","tooltip":"","color":"yellow","bgcolor":"","icon":"","payload":"1","payloadType":"num","topic":"auto","x":130,"y":1920,"wires":[["84d859ac.1ee838"]]},{"id":"834e95bf.6f2048","type":"ui_button","z":"afbd208.aeec8e","name":"button/start","group":"ffb2a407.2c9598","order":2,"width":3,"height":1,"passthru":false,"label":"SENSOR START","tooltip":"","color":"","bgcolor":"","icon":"","payload":"1","payloadType":"num","topic":"button/start","x":130,"y":2140,"wires":[["df79aea.3cdd15"]]},{"id":"32935b5f.33b594","type":"ui_button","z":"afbd208.aeec8e","name":"button/metal","group":"ffb2a407.2c9598","order":4,"width":3,"height":1,"passthru":false,"label":"SENSOR METAL","tooltip":"","color":"","bgcolor":"","icon":"","payload":"1","payloadType":"num","topic":"button/metal","x":130,"y":2180,"wires":[["8ee2855c.08c448"]]},{"id":"dfc32edc.5dae8","type":"ui_button","z":"afbd208.aeec8e","name":"button/item","group":"ffb2a407.2c9598","order":6,"width":3,"height":1,"passthru":false,"label":"SENSOR ITEM","tooltip":"","color":"","bgcolor":"","icon":"","payload":"1","payloadType":"num","topic":"button/item","x":130,"y":2220,"wires":[["3adb7174.61835e"]]},{"id":"6b11bd0d.186a64","type":"ui_button","z":"afbd208.aeec8e","name":"button/counter","group":"ffb2a407.2c9598","order":8,"width":3,"height":1,"passthru":false,"label":"SENSOR COUNTER","tooltip":"","color":"","bgcolor":"#FF00FF","icon":"","payload":"1","payloadType":"num","topic":"button/counter","x":140,"y":2260,"wires":[["f1cd728b.f7ebf"]]},{"id":"b1b4100b.1bff4","type":"ui_button","z":"afbd208.aeec8e","name":"button/end_metal","group":"ffb2a407.2c9598","order":10,"width":3,"height":1,"passthru":false,"label":"SENSOR END METAL","tooltip":"","color":"","bgcolor":"","icon":"","payload":"1","payloadType":"num","topic":"button/end_metal","x":150,"y":2300,"wires":[["ce6b280b.2c3158"]]},{"id":"226b3bf2.7b8bd4","type":"ui_button","z":"afbd208.aeec8e","name":"button/reset","group":"6d21ff54.35ea7","order":13,"width":6,"height":1,"passthru":false,"label":"RESET","tooltip":"","color":"white","bgcolor":"red","icon":"","payload":"1","payloadType":"num","topic":"system/reset","x":130,"y":1800,"wires":[["6c29737a.f423dc"]]},{"id":"bdcd605c.66372","type":"ui_button","z":"afbd208.aeec8e","name":"button/run","group":"6d21ff54.35ea7","order":12,"width":3,"height":1,"passthru":false,"label":"Run","tooltip":"","color":"","bgcolor":"","icon":"","payload":"1","payloadType":"num","topic":"run","x":120,"y":1880,"wires":[["c8c19f9b.16d9f"]]},{"id":"6e1495e3.f6eecc","type":"ui_button","z":"afbd208.aeec8e","name":"button/end_item","group":"ffb2a407.2c9598","order":12,"width":3,"height":1,"passthru":false,"label":"SENSOR END ITEM","tooltip":"","color":"","bgcolor":"","icon":"","payload":"1","payloadType":"num","topic":"button/end_item","x":140,"y":2340,"wires":[["8ef00186.44d33"]]},{"id":"51d71f04.cb2f7","type":"ui_text","z":"afbd208.aeec8e","group":"6d21ff54.35ea7","order":1,"width":3,"height":1,"name":"output/enable","label":"Enable","format":"<font color={{msg.color}} ><i class=\"fa fa-circle\" style=\"font-size:24px;\"></i></font>","layout":"row-spread","x":620,"y":440,"wires":[]},{"id":"6151f0bd.c3796","type":"ui_text","z":"afbd208.aeec8e","group":"6d21ff54.35ea7","order":3,"width":3,"height":1,"name":"output/main","label":"Main Band","format":"<font color={{msg.color}} ><i class=\"fa fa-circle\" style=\"font-size:24px;\"></i></font>","layout":"row-spread","x":610,"y":560,"wires":[]},{"id":"f96dd793.dcd308","type":"ui_text","z":"afbd208.aeec8e","group":"6d21ff54.35ea7","order":5,"width":3,"height":1,"name":"output/forward","label":"Distribution Forward","format":"<font color={{msg.color}} ><i class=\"fa fa-circle\" style=\"font-size:24px;\"></i></font>","layout":"row-spread","x":620,"y":600,"wires":[]},{"id":"5ad1d786.80a738","type":"ui_text","z":"afbd208.aeec8e","group":"6d21ff54.35ea7","order":7,"width":3,"height":1,"name":"output/backward","label":"Distribution Backward","format":"<font color={{msg.color}} ><i class=\"fa fa-circle\" style=\"font-size:24px;\"></i></font>","layout":"row-spread","x":620,"y":640,"wires":[]},{"id":"9bdec071.29449","type":"ui_text","z":"afbd208.aeec8e","group":"ffb2a407.2c9598","order":1,"width":3,"height":1,"name":"sensor/start","label":"Start","format":"<font color={{msg.color}} ><i class=\"fa fa-circle\" style=\"font-size:24px;\"></i></font>","layout":"row-spread","x":610,"y":680,"wires":[]},{"id":"74ebd76c.545498","type":"ui_text","z":"afbd208.aeec8e","group":"ffb2a407.2c9598","order":3,"width":3,"height":1,"name":"sensor/metal","label":"Metal","format":"<font color={{msg.color}} ><i class=\"fa fa-circle\" style=\"font-size:24px;\"></i></font>","layout":"row-spread","x":610,"y":720,"wires":[]},{"id":"8ff64cc1.f6626","type":"ui_text","z":"afbd208.aeec8e","group":"ffb2a407.2c9598","order":5,"width":3,"height":1,"name":"sensor/item","label":"Item","format":"<font color={{msg.color}} ><i class=\"fa fa-circle\" style=\"font-size:24px;\"></i></font>","layout":"row-spread","x":610,"y":760,"wires":[]},{"id":"edd9a22d.9aaeb","type":"ui_text","z":"afbd208.aeec8e","group":"ffb2a407.2c9598","order":7,"width":3,"height":1,"name":"sensor/counter","label":"Counter","format":"<font color={{msg.color}} ><i class=\"fa fa-circle\" style=\"font-size:24px;\"></i></font>","layout":"row-spread","x":620,"y":800,"wires":[]},{"id":"89b333d7.b024f","type":"ui_text","z":"afbd208.aeec8e","group":"ffb2a407.2c9598","order":9,"width":3,"height":1,"name":"sensor/end_metal","label":"End Metal","format":"<font color={{msg.color}} ><i class=\"fa fa-circle\" style=\"font-size:24px;\"></i></font>","layout":"row-spread","x":630,"y":840,"wires":[]},{"id":"e196ca.1588a938","type":"ui_text","z":"afbd208.aeec8e","group":"6d21ff54.35ea7","order":9,"width":3,"height":1,"name":"auto/man","label":"Auto","format":"<font color={{msg.color}} ><i class=\"fa fa-circle\" style=\"font-size:24px;\"></i></font>","layout":"row-spread","x":600,"y":480,"wires":[]},{"id":"4b0be785.670078","type":"ui_text","z":"afbd208.aeec8e","group":"79a0a355.1f336c","order":1,"width":6,"height":1,"name":"totalcounter","label":"TOTAL COUNT","format":"{{msg.count_total}}","layout":"col-center","x":450,"y":1160,"wires":[]},{"id":"a4b9f1df.0290f","type":"ui_text","z":"afbd208.aeec8e","group":"79a0a355.1f336c","order":2,"width":3,"height":1,"name":"metalcounter","label":"METAL COUNT","format":"{{msg.count_metal}}","layout":"row-spread","x":450,"y":1040,"wires":[]},{"id":"c5bf5654.54b098","type":"ui_text","z":"afbd208.aeec8e","group":"79a0a355.1f336c","order":3,"width":3,"height":1,"name":"itemcounter","label":"ITEM COUNT","format":"{{msg.count_item}}","layout":"row-spread","x":450,"y":1120,"wires":[]},{"id":"ce5b215e.ed11a","type":"ui_text","z":"afbd208.aeec8e","group":"79a0a355.1f336c","order":6,"width":3,"height":1,"name":"start/position","label":"START","format":"{{msg.count_start}}","layout":"row-spread","x":450,"y":960,"wires":[]},{"id":"d644a5bb.6b6a38","type":"ui_text","z":"afbd208.aeec8e","group":"79a0a355.1f336c","order":4,"width":3,"height":1,"name":"lift/metal_counter","label":"LIFT-METAL","format":"{{msg.count_lift_metal}}","layout":"row-spread","x":470,"y":1240,"wires":[]},{"id":"52ba4a95.f8ca44","type":"ui_text","z":"afbd208.aeec8e","group":"79a0a355.1f336c","order":7,"width":3,"height":1,"name":"end/position","label":"END","format":"{{msg.count_end}}","layout":"row-spread","x":450,"y":1200,"wires":[]},{"id":"ac45e051.ca544","type":"ui_text","z":"afbd208.aeec8e","group":"79a0a355.1f336c","order":5,"width":3,"height":1,"name":"lift/item_counter","label":"LIFT-ITEM","format":"{{msg.count_lift_item}}","layout":"row-spread","x":460,"y":1280,"wires":[]},{"id":"846e42f5.9ec08","type":"ui_text","z":"afbd208.aeec8e","group":"79a0a355.1f336c","order":8,"width":6,"height":1,"name":"lift_alarm","label":"ALARM","format":"<font color= {{msg.color}} > {{msg.payload}} </font>","layout":"row-spread","x":440,"y":1320,"wires":[]},{"id":"652e009a.a63e1","type":"ui_text","z":"afbd208.aeec8e","group":"6d21ff54.35ea7","order":11,"width":3,"height":1,"name":"run","label":"Run","format":"<font color={{msg.color}} ><i class=\"fa fa-circle\" style=\"font-size:24px;\"></i></font>","layout":"row-spread","x":590,"y":520,"wires":[]},{"id":"fb352634.eef498","type":"ui_text","z":"afbd208.aeec8e","group":"ffb2a407.2c9598","order":11,"width":3,"height":1,"name":"sensor/end_item","label":"End Item","format":"<font color={{msg.color}} ><i class=\"fa fa-circle\" style=\"font-size:24px;\"></i></font>","layout":"row-spread","x":630,"y":880,"wires":[]},{"id":"f48688d5.473c08","type":"ui_text","z":"afbd208.aeec8e","group":"79a0a355.1f336c","order":2,"width":3,"height":1,"name":"templ/metal_counter","label":"TEMPL METAL COUNT","format":"{{msg.templ_count_metal}}","layout":"row-spread","x":480,"y":1000,"wires":[]},{"id":"71f2ccfd.10d924","type":"ui_text","z":"afbd208.aeec8e","group":"79a0a355.1f336c","order":3,"width":3,"height":1,"name":"templ/item_counter","label":"TEMPL ITEM COUNT","format":"{{msg.templ_count_item}}","layout":"row-spread","x":470,"y":1080,"wires":[]},{"id":"1df5adc9.0d1d32","type":"function","z":"afbd208.aeec8e","name":"barrier-time","func":"let status = context.get('status') || false;\nlet barrier = flow.get('barrier_flag') || false;\nif(barrier === true && status === false){\n    let time = flow.get('barrier_time');\n    msg.topic = \"barrier\";\n    setTimeout(function(){\n        msg.payload = \"Time is setted to \" + time/1000 + \"s.\";\n        node.send(msg);\n    }, time);\n    status = true;\n    context.set('status', status);\n}\nif(barrier === false && status === true) {\n    status = false;\n    context.set('status', status);\n}","outputs":1,"noerr":0,"x":470,"y":280,"wires":[["6ec5274f.792a18"]]},{"id":"6ec5274f.792a18","type":"function","z":"afbd208.aeec8e","name":"set delay","func":"let topic = msg.topic;\nif(topic === \"barrier\"){\n    flow.set('delay5', 1);\n}\nelse if(topic === \"action\"){\n    flow.set('delay6', 1);\n}\nelse if(topic === \"metal\"){\n    flow.set('delay7', 1);\n    //flow.set('metal_output_flag', 0);\n    flow.set('output_flag', 0);\n}\nreturn msg;","outputs":1,"noerr":0,"x":640,"y":320,"wires":[[]]},{"id":"cf376d82.7ed41","type":"function","z":"afbd208.aeec8e","name":"action-time","func":"let status = context.get('status') || false;\nlet action = flow.get('action_flag') || false;\nif(action === true && status === false){\n    let time = flow.get('action_time');\n    msg.topic = \"action\";\n    setTimeout(function(){\n        msg.payload = \"Time is setted to \" + time/1000 + \"s.\";\n        node.send(msg);\n    }, time);\n    status = true;\n    context.set('status', status);\n}\nif(action === false && status === true) {\n    status = false;\n    context.set('status', status);\n}","outputs":1,"noerr":0,"x":470,"y":320,"wires":[["6ec5274f.792a18"]]},{"id":"6f640c2c.d0a954","type":"function","z":"afbd208.aeec8e","name":"metal-time","func":"let status = context.get('status') || false;\nlet output = flow.get('output_flag') || false;\nif(output === true && status === false){\n    let time = flow.get('metal_time');\n    msg.topic = \"metal\";\n    setTimeout(function(){\n        msg.payload = \"Time is setted to \" + time/1000 + \"s.\";\n        node.send(msg);\n    }, time);\n    status = true;\n    context.set('status', status);\n}\nif(output === false && status === true) {\n    status = false;\n    context.set('status', status);\n}","outputs":1,"noerr":0,"x":470,"y":360,"wires":[["6ec5274f.792a18"]]},{"id":"4d74864f.8b0578","type":"function","z":"afbd208.aeec8e","name":"buff","func":"\nreturn msg;","outputs":1,"noerr":0,"x":300,"y":340,"wires":[["cf376d82.7ed41","6f640c2c.d0a954","1df5adc9.0d1d32","7313e87a.b52bd8","4091eaff.2ecd44"]]},{"id":"b3d1513c.a7e36","type":"comment","z":"afbd208.aeec8e","name":"Input from SCADA","info":"","x":110,"y":1740,"wires":[]},{"id":"e58608f1.2bfcf8","type":"comment","z":"afbd208.aeec8e","name":"Output to SCADA","info":"","x":680,"y":1470,"wires":[]},{"id":"49f1ec4f.7fa664","type":"function","z":"afbd208.aeec8e","name":"buff","func":"\nreturn msg;","outputs":1,"noerr":0,"x":520,"y":1410,"wires":[["3ecf5f1c.a3ae"]]},{"id":"86e4732b.122b9","type":"comment","z":"afbd208.aeec8e","name":"Custom Timers","info":"","x":660,"y":280,"wires":[]},{"id":"55f51a4c.00dbe4","type":"mqtt-broker","z":"","name":"MyMQTT","broker":"localhost","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"d368dd4d.3809","type":"modbus-client","z":"","name":"MyModbus","clienttype":"tcp","bufferCommands":true,"stateLogEnabled":false,"tcpHost":"127.0.0.1","tcpPort":"502","tcpType":"DEFAULT","serialPort":"/dev/ttyUSB","serialType":"RTU-BUFFERD","serialBaudrate":"9600","serialDatabits":"8","serialStopbits":"1","serialParity":"none","serialConnectionDelay":"100","unit_id":"1","commandDelay":"1","clientTimeout":"1000","reconnectTimeout":"2000"},{"id":"6d21ff54.35ea7","type":"ui_group","z":"","name":"Control","tab":"6030f446.95851c","disp":true,"width":"6","collapse":false},{"id":"ffb2a407.2c9598","type":"ui_group","z":"","name":"Sensors","tab":"6030f446.95851c","disp":true,"width":"6","collapse":false},{"id":"79a0a355.1f336c","type":"ui_group","z":"","name":"Display","tab":"6030f446.95851c","order":1,"disp":true,"width":"6","collapse":false},{"id":"6030f446.95851c","type":"ui_tab","z":"","name":"LentaNew","icon":"dashboard","disabled":false,"hidden":false}]